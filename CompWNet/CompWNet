# Mostly just a testing zone roight now, will eventually have to good stuff

import os
from re import I
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"

import tensorflow as tf
from tensorflow import keras as ks
from keras import layers
from keras.datasets import mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape(-1, 28, 28, 1).astype("float32") / 255.0
x_test = x_test.reshape(-1, 28, 28, 1).astype("float32") / 255.0

print("Initialized, data loaded. \n\n")
print("Test shape:", x_test.shape)
print("Train shape:", x_train.shape)

class Dense(layers.Layer):
    def __init__(self, units):
        super(Dense, self).__init__()
        self.units = units

    def build(self, input_shape):
        self.w = self.add_weight(
            name='w', 
            shape=(input_shape[-1], self.units),
            initializer='random_normal', 
            trainable=True
        )
        self.b = self.add_weight(
            name='b', 
            shape=(self.units, ), 
            initializer='zeros'
        )
    
    def call(self, inputs):
        return tf.matmul(inputs, self.w) + self.b

model = ks.Sequential([
    layers.Flatten(),
    Dense(128), 
    Dense(10),
    ])

model.compile(
    optimizer=ks.optimizers.Adam(), 
    loss=ks.losses.SparseCategoricalCrossentropy(from_logits=True), 
    metrics=['accuracy']
    )

model.fit(x_train, y_train, batch_size=64, epochs=1)
model.evaluate(x_test, y_test, batch_size=64)


